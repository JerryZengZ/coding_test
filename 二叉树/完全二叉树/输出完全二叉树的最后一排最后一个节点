题目1：输出完全二叉树的最后一排最后一个node
要求：查询时间在O(n)以内
分析：根据完全二叉树的特性，要找到最后一排的最后一个节点，时间小于O（n），那么使用类似二分法的方法进行遍历。
思路1：1、首先根据完全二叉树的特性，从根部节点出发，一直往左子树进行遍历，直到为空，得到树的深度；
     2、从根结点开始，从右孩子出发，一直从其左分支往下到最后，（判断：如果到此深度等于树的深度，并且没有右孩子，那么就返回该节点的左孩子；
                                                            如果右孩子存在，那么遍历右孩子；
                                                            如果小于树的深度，那么遍历左子树。） 

思路2:1、首先从根部节点出发，一直往左遍历，直到为空，得到树的高度；
     2、判断左子树的高度和右子树的高度（判断：如果左高，那么递归遍历左子树；
                                        如果相等，那么遍历右子树；）
     3、时间复杂度为O（logN）*O（logN）；

思路2:如果已知树的节点个数N，一直除以2，记录结果的奇偶行，将结果顺序反过来，从根结点开始，从上到下遍历，按照奇右，偶左的规则一直往下，即可得到最后结果。
     例如N为19，那么结果记录为（19，9，4，2，1）从不为1的数开始，即为（偶偶奇奇），反过来为（奇奇偶偶）。
     
思路3:完全二叉树如果存储方式以数组的方式进行存储，那么数组的最后一个就是需要输出的结果。
     
思路1代码（java、时间复杂度为O（logN））：
struct BinaryTreeNode{
    int value;
    BinaryTreeNode* left;
    BinaryTreeNode* right;
    BinaryTreeNode(int x): value(x), left(NULL), right(NULL){}
};

BinaryTreeNode* getLastNode(BinaryTreeNode* root)
{
    //只有根节点
    if(root || (!root->left&&!root->right)) return root;
    int depth = 0;
    BinaryTreeNode* curNode = root;
    while(curNode)
    {
        depth++;
        curNode = curNode->left;
    }
    int level = 0, tmpdepth = 0;
    while(root)
    {
        level++;//当前是第几层，根节点是第一层
        if(level==depth) break; // 防止右子树为空
        curNode = root;
        // 是否在判断右子树
        if(curNode->right)
        {
            BinaryTreeNode* pCur = root;
            curNode = curNode->right;
            tmpdepth = level + 1;
            //找右子树的最左枝
            while (curNode->left)
            {
                tmpdepth++;
                pCur = curNode;
                curNode = curNode->left;
            }
            if(tmpdepth<depth) root = root->left;//不在右子树，在左子树，根节点移动到左子树
            else if(!pCur->right||pCur->right==curNode) return curNode;//深度已经满足了，如果没有右兄弟或者自己就是右兄弟，那么即为所求
            else root = root->right;//确实在右子树，根节点移动到右子树
            
        }
        else root = root->left;
    }
    return root;// 保证程序完整
}

