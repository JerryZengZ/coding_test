题目描述：给两个树，判断是否相同
分析：采用递归的方式进行判断，如果根结点相同，那么递归遍历左子树和右子树
思路1:1、首先判断是否都为空，即返回true；
    2、接着判断两方都不为空时，值是否相等，即可递归遍历左子树和右子树；
    3、否则返回false；
    
代码（c++）：
注意：树的节点用->进行指向，为空用NULL，有&&、||、！等运算符。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL)  
            return true;
        else if(p && q && p->val==q->val)
            return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
        else
            return false;
    }
};

代码（java）：
注意：用.进行指向，为空用null，有&&、||、！等运算符。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)  
            return true;
        else if(p!=null && q!=null && p.val==q.val)
            return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        else
            return false;
    }
}

代码（python）：
注意：用.进行指向，为空用None,使用and、or、not等运算符

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if p==None and q==None:
            return True
        elif not p or not q:
            return False
        elif p.val==q.val:
            return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
        else:
            return False
